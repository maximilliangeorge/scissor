@use 'use';
@use 'define';
@use 'core' as core;
@use 'util' as util;
@use 'sass-true' as *;

@include describe('define-store') {

  @include it('should define a store') {

    @include assert-equal(core.get-all-stores(), (
      '_breakpoints': ()
    ));

    @include define.store('foo', ()); 

    @include assert-equal(core.get-all-stores(), (
      '_breakpoints': (),
      'foo': ()
    ));

    @include core.reset-stores();

  }

}

@include describe('define-breakpoint') {

  @include it('should define breakpoints') {

    @include assert-equal(core.get-breakpoints(), ());

    @include define.breakpoint('foo', (
      'to': 19px
    ));

    @include define.breakpoint('bar', (
      'from': 20px,
      'to': 30px
    ));

    @include assert-equal(core.get-breakpoints(), (
      'foo': ('to': 19px),
      'bar': ('from': 20px, 'to': 30px)
    ));

    @include core.reset-stores();

  }

}

@include describe('define-value') {

  @include it('should define a value (1)') {

    @include define.store('foo', ()); 

    @include define.value('foo', 'bar', (
      '*': 1px
    ));

    @include assert-equal(core.get-raw-store('foo'), (
      'bar': (
        '*': 1px
      )
    ));

    @include core.reset-stores();

  }

}

@include describe('use-value') {

  @include it('should get the value') {

    @include define.store('colors', ());

    @include define.value('colors', 'primary', (
      '*': red
    ));

    $some_map: (
      'mobile': 10px 10px,
      'tablet': 20px 20px
    );

    :root {
      color: util.hash-map($some_map);
      color: use.value('colors', 'bar');
    }

    @include core.reset-stores();

  }

  @include it('should create a separate custom property for an override') {

    @include define.store('colors', ());

    @include define.value('colors', 'primary', (
      '*': red,
      'mobile': blue
    ));

    :root {
      color: use.value('colors', 'primary', (
        'mobile': green
      ));
      color: use.value('colors', 'primary', (
        'mobile': green
      ));
    }

    $store: core.get-raw-store('colors');

    @include assert-equal($store, (
      'primary': (
        '*': red,
        'mobile': blue
      ),
      'primary-046f11': (
        '*': red,
        'mobile': green
      )
    ));

    @include core.reset-stores();

  }

  @include it('should create not create unneccessary duplicate custom properties') {

    @include define.store('colors', ());

    @include define.value('colors', 'primary', (
      '*': red,
      'mobile': blue
    ));

    :root {
      color: use.value('colors', 'primary', (
        'mobile': blue
      ));
      color: use.value('colors', 'primary', (
        'mobile': blue,
        '*': red
      ));
    }

    $store: core.get-raw-store('colors');

    @include assert-equal($store, (
      'primary': (
        '*': red,
        'mobile': blue
      )
    ));

    @include core.reset-stores();

  }

}

@include describe('use-store') {

  @include it('should inject a single custom property') {

    @include define.store('colors', ());

    @include define.value('colors', 'primary', (
      '*': red
    ));

    :root {
      @include use.store('colors');
    }

    @include core.reset-stores();

  }

  @include it('should inject multiple custom properties') {

    @include define.store('colors', ());

    @include define.value('colors', 'primary', (
      '*': red
    ));

    @include define.store('sizes', ());

    @include define.value('sizes', 'small', (
      '*': 10px
    ));

    :root {
      @include use.store('*');
    }

    @include core.reset-stores();

  }

  @include it('should inject multiple custom properties with breakpoints') {

    @include define.breakpoint('mobile', (
      'to': 375px
    ));

    @include define.breakpoint('tablet', (
      'from': 376px,
      'to': 768px
    ));

    @include define.store('colors', ());

    @include define.value('colors', 'primary', (
      '*': red,
      'mobile': blue
    ));

    @include define.store('sizes', ());

    @include define.value('sizes', 'small', (
      '*': 10px,
      'mobile': 20px,
      'tablet': 30px
    ));

    :root {
      @include use.store('*');
    }

    @include core.reset-stores();

  }

}

@include describe('use-breakpoint') {

  @include it('should create block for a breakpoint (*/to)') {

    @include define.breakpoint('mobile', (
      'to': 375px
    ));

    :root {
      @include use.breakpoint('mobile') {
        color: red;
      }
    }

    @include core.reset-stores();

  }

  @include it('should create block for a breakpoint (from/*)') {

    @include define.breakpoint('tablet', (
      'from': 375px
    ));

    :root {
      @include use.breakpoint('tablet') {
        color: red;
      }
    }

    @include core.reset-stores();

  }

  @include it('should create block for a breakpoint (from/to)') {

    @include define.breakpoint('desktop', (
      'from': 375px,
      'to': 768px
    ));

    :root {
      @include use.breakpoint('desktop') {
        color: red;
      }
    }

    @include core.reset-stores();

  }

  @include it('should create block for breakpoint with modifiers') {

    @include define.breakpoint('tablet', (
      'from': 375px,
      'to': 768px
    ));

    :root {
      @include use.breakpoint('tablet', '<') {
        color: red;
      }
      @include use.breakpoint('tablet', '>') {
        color: red;
      }
      @include use.breakpoint('tablet', '<=') {
        color: red;
      }
      @include use.breakpoint('tablet', '>=') {
        color: red;
      }
    }

    @include core.reset-stores();

  }

}