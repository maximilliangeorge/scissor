@use 'sass:map';
@use 'sass:meta';
@use 'util';
@use 'validate';
@use 'types';

$_stores: (
  '_breakpoints': ()
);

@mixin reset-stores () {
  $_stores: (
    '_breakpoints': ()
  ) !global;
}

@function get-raw-store ($key) {
  @return map.get($_stores, $key);
}

@function get-raw-value ($name, $key, $breakpoint: '*') {

  $store: get-raw-store($name);

  @if $store == null {
    @error 'Store not found';
  }

  $value: map.get($store, $key);

  @if $value == null {
    @error 'Value not found';
  }

  @if (type-of($value) == 'map') {
    @return map.get($value, $breakpoint);
  }

  @return $value;

}

@function get-all-stores () {
  @return $_stores;
}

@function get-breakpoints () {
  @return get-raw-store('_breakpoints');
}

@function get-breakpoint ($key) {
  @return map.get(get-breakpoints(), $key);
}

@function get-value ($name, $key, $overrides: null) {

  $store: get-raw-store($name);

  @if $store == null {
    @error 'Store not found';
  }

  @if ($overrides == null) {

    @warn 'Unnecessary use of overrides, using default declaration for --#{$name}-#{$key}';

    @return var(--#{$name}-#{$key});

  }

  @else {

    // get our computed entry with overrides

    $entry: map.merge(map.get($store, $key), $overrides);

    // check if we already have this entry

    @if ($entry == map.get($store, $key)) {
      @return var(--#{$name}-#{$key});
    }

    $hash: util.hash-map($entry);
    $key-with-hash: '#{$key}-#{$hash}';

    @if not (map.has-key($store, $key-with-hash)) {

      $store: map.merge($store, (
        $key-with-hash: $entry
      ));

      $_stores: map.set($_stores, $name, $store) !global;

    }

    @return var(--#{$name}-#{$key-with-hash});

  }

}

@function get-values ($store, $overrides: ()) {

  $store: get-raw-store($store);

  @if $store == null {
    @error 'Store not found';
  }

  @return map.merge($store, $overrides);

}

@mixin define-store ($key, $value: ()) {
  $_stores: map.set($_stores, $key, $value) !global;
  // @debug $_stores;
}

@mixin define-breakpoint ($key, $def) {

  $breakpoints: get-breakpoints();

  $breakpoints: map.merge($breakpoints, (
    $key: $def
  ));

  $_stores: map.set($_stores, '_breakpoints', $breakpoints) !global;

}

@mixin define-value ($store, $key, $value, $breakpoints: ()) {

  $module: get-raw-store($store);

  @if (type-of($value) == 'map') {

    $module: map.merge($module, (
      $key: map.merge($value, $breakpoints)
    ));

  } @else {

    $module: map.merge($module, (
      $key: map.merge(( '*': $value ), $breakpoints)
    ));

  }

  $default: map.get($module, $key, '*');

  @if $default == null {
    @error 'Default (*) value is required';
  }

  $_stores: map.set($_stores, $store, $module) !global;

}