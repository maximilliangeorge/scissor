@use 'sass:map';
@use 'validate';
@use 'types';

$_store: (
  'breakpoints': ()
);

@function get-raw-namespace ($key) {
  @return map.get($_store, $key);
}

@function get-all-namespaces () {
  @return $_store;
}

@function get-breakpoints () {
  @return get-raw-namespace('breakpoints');
}

@function get-breakpoint ($key) {
  @return map.get(get-breakpoints(), $key);
}

@function get-value ($namespace, $key, $breakpoint: 'default') {

  $namespace: get-raw-namespace($namespace);

  @if $namespace == null {
    @error 'Namespace not found';
  }

  @return map.get($namespace, $key, $breakpoint);

}

@function get-values ($namespace, $overrides: ()) {

  $namespace: get-raw-namespace($namespace);

  @if $namespace == null {
    @error 'Namespace not found';
  }

  @return map.merge($namespace, $overrides);

}

@mixin define-namespace ($key, $value: ()) {
  @include validate.string($key, 'Expected namespace');
  $_store: map.set($_store, $key, $value) !global;
}

@mixin define-breakpoint ($key, $def) {

  @include validate.string($key, 'Expected breakpoint name');
  @include validate.type($def, types.$breakpoint-definition);

  $breakpoints: get-breakpoints();

  $breakpoints: map.merge($breakpoints, (
    $key: $def
  ));

  $_store: map.set($_store, 'breakpoints', $breakpoints) !global;

}

@mixin define-value ($namespace, $key, $value, $reactive: ()) {

  @include validate.string($namespace, 'Expected namespace name');
  @include validate.string($key, 'Expected value name');

  $module: get-raw-namespace($namespace);

  @if (type-of($value) == 'map') {

    $module: map.merge($module, (
      $key: map.merge($value, $reactive)
    ));

  } @else {

    $module: map.merge($module, (
      $key: map.merge(( 'default': $value ), $reactive)
    ));

  }

  $default: map.get($module, $key, 'default');

  @if $default == null {
    @error 'Default value is required';
  }

  $_store: map.set($_store, $namespace, $module) !global;

}