@use 'util';
// @use 'store';
@use 'validate';
@use 'sass:map';
@use 'sass:list';
@use 'sass:math';
@use 'sass:meta';

$_stores: (
  '_breakpoints': ()
);

@mixin use-breakpoint-by-name ($name, $modifier: '=') {

  $breakpoint: get-breakpoint($name);

  $to: map.get($breakpoint, 'to');
  $from: map.get($breakpoint, 'from');

  @if $breakpoint == null {
    @error 'Did not find breakpoint "#{$name}"';
  }

  @if ($to == null) or ($modifier == '>=') {
    @media (min-width: $from) {
      @content;
    }
  }
  
  @else if ($from == null) or ($modifier == '<=') {
    @media (max-width: $to) {
      @content;
    }
  }
  
  @else if ($modifier == '<') {

    @if not (math.unit($from) == 'px') {
      @error 'Modifier not supported';
    }  

    @media (max-width: #{ $from - 1px }) {
      @content;
    }

  }

  @else if ($modifier == '>') {

    @if not (math.unit($to) == 'px') {
      @error 'Modifier not supported';
    }   

    @media (min-width: #{ $to + 1px }) {
      @content;
    }

  }

  @else {

    @media (min-width: $from) and (max-width: $to) {
      @content;
    }

  }

}

@mixin inject-stores ($names...) {

  // loop over names and get stores

  $queued-breakpoints: ();

  @each $name in $names {

    $store: get-raw-store($name);

    @if $store == null {
      @error 'Did not find store "#{$name}"';
    }

    @each $key, $breakpoints in $store {

      @each $breakpoint, $value in $breakpoints {

        @if $breakpoint == '*' {
          --#{$name}-#{$key}: #{$value};
        }

        @else if not (list.index($queued-breakpoints, $breakpoint)) {
          $queued-breakpoints: list.append($queued-breakpoints, $breakpoint);
        }

      }

    }

  }

  // loop over breakpoints and get values

  @each $breakpoint in $queued-breakpoints {

    @include use-breakpoint-by-name($breakpoint) {

      @each $name in $names {

        $store: get-raw-store($name);

        @if $store == null {
          @error 'Did not find store "#{$name}"';
        }

        @each $key, $values in $store {

          $value: map.get($values, $breakpoint);

          @if $value != null {
            --#{$name}-#{$key}: #{$value};
          }

        }

      }

    }

  }

}

@mixin inject-all-stores () {

  $names: ();

  @each $name, $values in get-all-stores() {
    @if not ($name == '_breakpoints') {
      $names: list.append($names, $name);
    }
  }

  @include inject-stores($names...);

}

@mixin reset-stores () {
  $_stores: (
    '_breakpoints': ()
  ) !global;
}

@function get-raw-store ($key) {
  @return map.get($_stores, $key);
}

@function get-raw-value ($name, $key, $breakpoint: '*') {

  $store: get-raw-store($name);

  @if $store == null {
    @error 'Store not found';
  }

  $value: map.get($store, $key);

  @if $value == null {
    @error 'Value not found';
  }

  @if (type-of($value) == 'map') {
    @return map.get($value, $breakpoint);
  }

  @return $value;

}

@function get-all-stores () {
  @return $_stores;
}

@function get-breakpoints () {
  @return get-raw-store('_breakpoints');
}

@function get-breakpoint ($key) {
  @return map.get(get-breakpoints(), $key);
}

@function get-value ($name, $key, $overrides: null) {

  $store: get-raw-store($name);

  @if $store == null {
    @error 'Store not found';
  }

  @if ($overrides == null) {

    @warn 'Unnecessary use of overrides, using default declaration for --#{$name}-#{$key}';

    @return var(--#{$name}-#{$key});

  }

  @else {

    // get our computed entry with overrides

    $entry: map.merge(map.get($store, $key), $overrides);

    // check if we already have this entry

    @if ($entry == map.get($store, $key)) {
      @return var(--#{$name}-#{$key});
    }

    $hash: util.hash-map($entry);
    $key-with-hash: '#{$key}-#{$hash}';

    @if not (map.has-key($store, $key-with-hash)) {

      $store: map.merge($store, (
        $key-with-hash: $entry
      ));

      $_stores: map.set($_stores, $name, $store) !global;

    }

    @return var(--#{$name}-#{$key-with-hash});

  }

}

@function get-values ($store, $overrides: ()) {

  $store: get-raw-store($store);

  @if $store == null {
    @error 'Store not found';
  }

  @return map.merge($store, $overrides);

}

@mixin define-store ($key, $value: ()) {
  $_stores: map.set($_stores, $key, $value) !global;
  // @debug $_stores;
}

@mixin define-breakpoint ($key, $def) {

  $breakpoints: get-breakpoints();

  $breakpoints: map.merge($breakpoints, (
    $key: $def
  ));

  $_stores: map.set($_stores, '_breakpoints', $breakpoints) !global;

}

@mixin define-value ($name, $key, $value, $breakpoints: ()) {

  $store: get-raw-store($name);

  @if (type-of($value) == 'map') {

    $store: map.merge($store, (
      $key: map.merge($value, $breakpoints)
    ));

  } @else {

    $store: map.merge($store, (
      $key: map.merge(( '*': $value ), $breakpoints)
    ));

  }

  $has-default: map.get($store, $key, '*');

  @if $has-default == null {
    @error 'Default (*) value is required';
  }

  @if (meta.type-of($breakpoints) == 'map') {

    // check that all breakpoints are defined

    $defined-breakpoints: get-breakpoints();

    @each $breakpoint in map.keys($breakpoints) {
      @if not (map.has-key($defined-breakpoints, $breakpoint)) {
        @error 'Breakpoint #{$breakpoint} not defined';
      }
    }

  }

  $_stores: map.set($_stores, $name, $store) !global;

}